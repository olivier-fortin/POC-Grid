.grid-container .react-view {
    box-sizing: border-box;
    margin-right: $column-gutter;

    > .row,
    > * > .row {
        align-items: stretch;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        margin-left: -$column-gutter/2;
        margin-right: -$column-gutter/2;
        
        > [class*="col-"] {
            //display: flex;
            //flex-direction: row;
            //flex-wrap: wrap;
            min-height: 20px;
        }
    }
    .row > * > .row {
        @include xs-only {
            @for $i from 1 through $column-count-xs {
                > [class*="col-xs-#{$i}"] {
                    background-color: orange !important;
                    margin-left: -$column-gutter-xs/2;
                    margin-right: -$column-gutter-xs/2;
                    width: calc(((100% / #{$column-count-xs}) * #{$i}) - #{$column-gutter-xs} / 2);
                    &.full-size {
                        background-color: darkviolet !important;
                        margin-left: -$column-gutter-xs;
                        margin-right: -$column-gutter-xs;
                        width: calc(((100% / #{$column-count-xs}) * #{$i}) + #{$column-gutter-xs} * 2);
                    }
                }
                .offset-xs-#{$i} {
                    margin-left: calc(((100% / #{$column-count-xs}) * #{$i}) + #{$column-gutter-xs} / 2);
                }
            }
        }
    }

    @include xs-only {
        margin-left: $navigation-size-xs;
        margin-right: $column-gutter-xs;
        
        > .row,
        > * > .row {
            margin-left: -$column-gutter-xs/2;
            margin-right: -$column-gutter-xs/2;


        }

        @for $i from 1 through $column-count-xs {
            .col-xs-#{$i} {
                background: aquamarine;
                box-sizing: border-box;
                margin-left: $column-gutter-xs/2;
                margin-right: $column-gutter-xs/2;
                width: calc(((100%/#{$column-count-xs}) * #{$i}) - #{$column-gutter-xs});
                &.full-width {
                    margin-left: -$column-gutter-xs/2;
                    margin-right: -$column-gutter-xs/2;
                    width: calc(((100%/#{$column-count-xs}) * #{$i}) - #{$column-gutter-xs} + #{$column-gutter-xs}*2);
                }
            }
            .offset-xs-#{$i} {
                margin-left: calc(((100%/#{$column-count-xs}) * #{$i}) + #{$column-gutter-xs}/2);
            }
        }
    }

    @include sm {
        margin-right: $column-gutter;
        
        > .row,
        > * > .row {
            margin-left: -$column-gutter/2;
            margin-right: -$column-gutter/2;
        }
    }


    $col-breakpoints: (
        'sm' : (
            'column-count': '$column-count-sm',
            'bgcolor': lightsalmon
        ),
       'md' : (
            'column-count': '$column-count-md',
            'bgcolor': chartreuse
        ),
        'lg' : (
            'column-count': '$column-count-lg',
            'bgcolor': aquamarine
        ),
        'xl' : (
            'column-count': '$column-count-xl',
            'bgcolor': purple
        ),
        'xxl' : (
            'column-count': '$column-count-xxl',
            'bgcolor': lightblue
        )
    ) !default;
    
    
    @mixin columns-breakpoint {
        @each $breakpoint in $col-breakpoints {
            @each map-get($col-breakpoints, $column-count), map-get($col-breakpoints, $bgcolor) in $col-breakpoints {
                .col-#{map-get($col-breakpoints, $breakpoint)}-#{map-get($col-breakpoints, $column-count)} {
                    box-sizing: border-box;
                    margin-left: $column-gutter/2;
                    margin-right: $column-gutter/2;
                    width: calc(((100%/#{map-get($col-breakpoints, $column-count)}) * #{$i}) - #{$column-gutter});
                    
                    &.full-width {
                        width: calc(((100%/#{map-get($col-breakpoints, $column-count)}) * #{$i}) - #{$column-gutter} + #{$column-gutter}*2); 
                    }
                }
            
                .offset-#{map-get($col-breakpoints, $breakpoint)}-#{$i} {
                    margin-left: calc(((100%/#{map-get($col-breakpoints, $column-count)}) * #{$i}) + #{$column-gutter}/2);
                }
            }
        }
    }
    
    @for $i from 1 through $col-breakpoints {
        @include columns-breakpoint();
    } 
    
}